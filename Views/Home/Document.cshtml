@model PdfModel
<link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.0.2/css/bootstrap.min.css'>
<link rel='stylesheet' href='https://cdn.jsdelivr.net/gh/dealfonso/pdfjs-viewer@1.0.0/pdfjs-viewer.min.css'>
<link rel='stylesheet' href='https://fonts.googleapis.com/icon?family=Material+Icons+Outlined'>
<link href="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css" rel="stylesheet">
<script src="https://unpkg.com/material-components-web@latest/dist/material-components-web.min.js"></script>
<script src="https://cdn.hellosign.com/public/js/embedded/v2.1.3/embedded.production.min.js"></script>
<style>
    /* Copyright 2023 The MediaPipe Authors.
                 Licensed under the Apache License, Version 2.0 (the "License");
                 you may not use this file except in compliance with the License.
                 You may obtain a copy of the License at
                 http://www.apache.org/licenses/LICENSE-2.0
                 Unless required by applicable law or agreed to in writing, software
                 distributed under the License is distributed on an "AS IS" BASIS,
                 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                 See the License for the specific language governing permissions and
                 limitations under the License. */
    /* Copyright 2022 The MediaPipe Authors.
                 Licensed under the Apache License, Version 2.0 (the "License");
                 you may not use this file except in compliance with the License.
                 You may obtain a copy of the License at
                 http://www.apache.org/licenses/LICENSE-2.0
                 Unless required by applicable law or agreed to in writing, software
                 distributed under the License is distributed on an "AS IS" BASIS,
                 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                 See the License for the specific language governing permissions and
                 limitations under the License. */
    body {
        font-family: helvetica, arial, sans-serif;
        margin: 2em;
        color: #3d3d3d;
        --mdc-theme-primary: #007f8b;
        --mdc-theme-on-primary: #f1f3f4;
    }

    h1 {
        font-style: italic;
        color: #ff6f00;
        color: #007f8b;
    }

    h2 {
        clear: both;
    }

    em {
        font-weight: bold;
    }

    video {
        clear: both;
        display: block;
        transform: rotateY(180deg);
        -webkit-transform: rotateY(180deg);
        -moz-transform: rotateY(180deg);
    }

    section {
        opacity: 1;
        transition: opacity 500ms ease-in-out;
    }

    header,
    footer {
        clear: both;
    }

    .removed {
        display: none;
    }

    .invisible {
        opacity: 0.2;
    }

    .note {
        font-style: italic;
        font-size: 130%;
    }

    .videoView,
    .detectOnClick,
    .blend-shapes {
        position: relative;
        float: left;
        width: 48%;
        margin: 2% 1%;
        cursor: pointer;
    }

        .videoView p,
        .detectOnClick p {
            position: absolute;
            padding: 5px;
            background-color: #007f8b;
            color: #fff;
            border: 1px dashed rgba(255, 255, 255, 0.7);
            z-index: 2;
            font-size: 12px;
            margin: 0;
        }

    .highlighter {
        background: rgba(0, 255, 0, 0.25);
        border: 1px dashed #fff;
        z-index: 1;
        position: absolute;
    }

    .canvas {
        z-index: 1;
        position: absolute;
        pointer-events: none;
    }

    .output_canvas {
        transform: rotateY(180deg);
        -webkit-transform: rotateY(180deg);
        -moz-transform: rotateY(180deg);
    }

    .detectOnClick {
        z-index: 0;
    }

        .detectOnClick img {
            width: 100%;
        }

    .blend-shapes-item {
        display: flex;
        align-items: center;
        height: 20px;
    }

    .blend-shapes-label {
        display: flex;
        width: 120px;
        justify-content: flex-end;
        align-items: center;
        margin-right: 4px;
    }

    .blend-shapes-value {
        display: flex;
        height: 16px;
        align-items: center;
        background-color: #007f8b;
    }
</style>

<style>
    .pdftoolbar,
    .pdftoolbar i {
        font-size: 14px;
    }

        .pdftoolbar span {
            margin-right: 0.5em;
            margin-left: 0.5em;
            width: 4em !important;
            font-size: 12px;
        }

        .pdftoolbar .btn-sm {
            padding: 0.12rem 0.25rem;
        }

    .pdfjs-viewer {
        height: 80vh !important;
    }

    .pdftoolbar {
        width: 100%;
        height: auto;
        background: #ddd;
        z-index: 100;
    }
</style>

<script>
    window.console = window.console || function (t) { };
</script>

<section id="demos" class="invisible">
    <h2>Demo: Track your eyes so that the system can detect if you read.</h2>
    <p>Hold your face in front of your webcam to get real-time face landmarker detection.</br>Click <b>enable webcam</b> below and grant access to the webcam if prompted.</p>
    <p>when the system detects you read it opens the signing page.</p>

    <div id="liveView" class="videoView">
        <button id="webcamButton" class="mdc-button mdc-button--raised">
            <span class="mdc-button__ripple"></span>
            <span class="mdc-button__label">ENABLE WEBCAM</span>
        </button>
        <div style="position: relative;">
            <video id="webcam" style="position: abso" autoplay playsinline></video>
            <canvas class="output_canvas" id="output_canvas" style="position: absolute; left: 0px; top: 0px;"></canvas>
        </div>
    </div>
    <div class="blend-shapes">
        <ul class="blend-shapes-list" id="video-blend-shapes"></ul>
    </div>
</section>
<div class="row h-100">
    <div class="col-12 text-center">
    </div>
    <div class="row col-10 offset-md-1 pdfviewer p-0 row h-100" style="z-index:-10000 !important">
        <div class="pdftoolbar text-center row m-0 p-0">
            <div class="col-12 col-lg-6 my-1">
                <button class="btn btn-secondary btn-sm btn-first" onclick="pdfViewer.first()"><i class="material-icons-outlined">skip_previous</i></button>
                <button class="btn btn-secondary btn-sm btn-prev" onclick="pdfViewer.prev(); return false;"><i class="material-icons-outlined">navigate_before</i></button>
                <span class="pageno"></span>
                <button class="btn btn-secondary btn-sm btn-next" onclick="pdfViewer.next(); return false;"><i class="material-icons-outlined">navigate_next</i></button>
                <button class="btn btn-secondary btn-sm btn-last" onclick="pdfViewer.last()"><i class="material-icons-outlined">skip_next</i></button>
            </div>
            <div class="col-12 col-lg-6 my-1">
                <button class="btn btn-secondary btn-sm" onclick="pdfViewer.setZoom('out')"><i class="material-icons-outlined">zoom_out</i></button>
                <span class="zoomval">100%</span>
                <button class="btn btn-secondary btn-sm" onclick="pdfViewer.setZoom('in')"><i class="material-icons-outlined">zoom_in</i></button>
                <button class="btn btn-secondary btn-sm ms-3" onclick="pdfViewer.setZoom('width')"><i class="material-icons-outlined">swap_horiz</i></button>
                <button class="btn btn-secondary btn-sm" onclick="pdfViewer.setZoom('height')"><i class="material-icons-outlined">swap_vert</i></button>
                <button class="btn btn-secondary btn-sm" onclick="pdfViewer.setZoom('fit')"><i class="material-icons-outlined">fit_screen</i></button>
            </div>
        </div>
        <div class="pdfjs-viewer h-100">
        </div>
    </div>
</div>
<script src='https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.12.313/pdf.min.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js'></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/js/bootstrap.min.js'></script>
<script src='https://cdn.jsdelivr.net/gh/dealfonso/pdfjs-viewer@1.0.0/pdfjs-viewer.min.js'></script>
<script id="rendered-js">
    var pdfjsLib = window["pdfjs-dist/build/pdf"];
    pdfjsLib.GlobalWorkerOptions.workerSrc =
        "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.12.313/pdf.worker.min.js";

    let pdfViewer = new PDFjsViewer($(".pdfjs-viewer"), {
        onZoomChange: function (zoom) {
            zoom = parseInt(zoom * 10000) / 100;
            $(".zoomval").text(zoom + "%");
        },
        onActivePageChanged: function (page, pageno) {
            $(".pageno").text(pageno + "/" + this.getPageCount());
        }
    });

    pdfViewer.
        loadDocument(
            '/pdf/example_signature_request.pdf').

        then(function () {
            pdfViewer.setZoom("fit");
        });
</script>
<script>
    window.console = window.console || function (t) { };
</script>

<script id="rendered-js" type="module">
    import vision from "https://cdn.jsdelivr.net/npm/@@mediapipe/tasks-vision@0.10.3";
    const { FaceLandmarker, FilesetResolver, DrawingUtils } = vision;
    const demosSection = document.getElementById("demos");
    const imageBlendShapes = document.getElementById("image-blend-shapes");
    const videoBlendShapes = document.getElementById("video-blend-shapes");
    let faceLandmarker;
    let runningMode = "IMAGE";
    let enableWebcamButton;
    let webcamRunning = false;
    const videoWidth = 480;
    // Before we can use HandLandmarker class we must wait for it to finish
    // loading. Machine Learning models can be large and take a moment to
    // get everything needed to run.
    async function createFaceLandmarker() {
        const filesetResolver = await FilesetResolver.forVisionTasks("https://cdn.jsdelivr.net/npm/@@mediapipe/tasks-vision@0.10.3/wasm");
        faceLandmarker = await FaceLandmarker.createFromOptions(filesetResolver, {
            baseOptions: {
                modelAssetPath: `https://storage.googleapis.com/mediapipe-models/face_landmarker/face_landmarker/float16/1/face_landmarker.task`,
                delegate: "GPU"
            },
            outputFaceBlendshapes: true,
            runningMode,
            numFaces: 1
        });
        demosSection.classList.remove("invisible");
    }
    createFaceLandmarker();
    const video = document.getElementById("webcam");
    const canvasElement = document.getElementById("output_canvas");
    const canvasCtx = canvasElement.getContext("2d");
    // Check if webcam access is supported.
    function hasGetUserMedia() {
        return !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia);
    }
    // If webcam supported, add event listener to button for when user
    // wants to activate it.
    if (hasGetUserMedia()) {
        enableWebcamButton = document.getElementById("webcamButton");
        enableWebcamButton.addEventListener("click", enableCam);
    }
    else {
        console.warn("getUserMedia() is not supported by your browser");
    }
    // Enable the live webcam view and start detection.
    function enableCam(event) {
        if (!faceLandmarker) {
            console.log("Wait! faceLandmarker not loaded yet.");
            return;
        }
        if (webcamRunning === true) {
            webcamRunning = false;
            enableWebcamButton.innerText = "ENABLE PREDICTIONS";
        }
        else {
            webcamRunning = true;
            enableWebcamButton.innerText = "DISABLE PREDICTIONS";
        }
        // getUsermedia parameters.
        const constraints = {
            video: true
        };
        // Activate the webcam stream.
        navigator.mediaDevices.getUserMedia(constraints).then((stream) => {
            video.srcObject = stream;
            video.addEventListener("loadeddata", predictWebcam);
        });
    }
    let lastVideoTime = -1;
    let results = undefined;
    const drawingUtils = new DrawingUtils(canvasCtx);
    async function predictWebcam() {
        const radio = video.videoHeight / video.videoWidth;
        video.style.width = videoWidth + "px";
        video.style.height = videoWidth * radio + "px";
        canvasElement.style.width = videoWidth + "px";
        canvasElement.style.height = videoWidth * radio + "px";
        canvasElement.width = video.videoWidth;
        canvasElement.height = video.videoHeight;
        // Now let's start detecting the stream.
        if (runningMode === "IMAGE") {
            runningMode = "VIDEO";
            await faceLandmarker.setOptions({ runningMode: runningMode });
        }
        let startTimeMs = performance.now();
        if (lastVideoTime !== video.currentTime) {
            lastVideoTime = video.currentTime;
            results = faceLandmarker.detectForVideo(video, startTimeMs);
        }
        if (results.faceLandmarks) {
            for (const landmarks of results.faceLandmarks) {
                drawingUtils.drawConnectors(landmarks, FaceLandmarker.FACE_LANDMARKS_TESSELATION, { color: "#C0C0C070", lineWidth: 1 });
                drawingUtils.drawConnectors(landmarks, FaceLandmarker.FACE_LANDMARKS_RIGHT_EYE, { color: "#FF3030" });
                drawingUtils.drawConnectors(landmarks, FaceLandmarker.FACE_LANDMARKS_RIGHT_EYEBROW, { color: "#FF3030" });
                drawingUtils.drawConnectors(landmarks, FaceLandmarker.FACE_LANDMARKS_LEFT_EYE, { color: "#30FF30" });
                drawingUtils.drawConnectors(landmarks, FaceLandmarker.FACE_LANDMARKS_LEFT_EYEBROW, { color: "#30FF30" });
                drawingUtils.drawConnectors(landmarks, FaceLandmarker.FACE_LANDMARKS_FACE_OVAL, { color: "#E0E0E0" });
                drawingUtils.drawConnectors(landmarks, FaceLandmarker.FACE_LANDMARKS_LIPS, { color: "#E0E0E0" });
                drawingUtils.drawConnectors(landmarks, FaceLandmarker.FACE_LANDMARKS_RIGHT_IRIS, { color: "#FF3030" });
                drawingUtils.drawConnectors(landmarks, FaceLandmarker.FACE_LANDMARKS_LEFT_IRIS, { color: "#30FF30" });
            }
        }
        drawBlendShapes(videoBlendShapes, results.faceBlendshapes);
        // Call this function again to keep predicting when the browser is ready.
        if (webcamRunning === true) {
            window.requestAnimationFrame(predictWebcam);
        }
    }
    let eyeBlinkLeftCount = 0;
    let eyeBlinkRightCount = 0;
    let eyeLookLeftCount = 0;
    let eyeLookRightCount = 0;
    let faceDetectEnabled=true;
    function drawBlendShapes(el, blendShapes) {
        if (!blendShapes.length) {
            return;
        }
        if (faceDetectEnabled===false){
            return;
        }
        const eyeBlinkLeft = blendShapes[0].categories.find(t => { return t.categoryName === "eyeBlinkLeft" });
        const eyeBlinkRight = blendShapes[0].categories.find(t => { return t.categoryName === "eyeBlinkRight" });
        const eyeLookInLeft = blendShapes[0].categories.find(t => { return t.categoryName === "eyeLookInLeft" });
        const eyeLookInRight = blendShapes[0].categories.find(t => { return t.categoryName === "eyeLookInRight" });
        const eyeLookOutLeft = blendShapes[0].categories.find(t => { return t.categoryName === "eyeLookOutLeft" });
        const eyeLookOutRight = blendShapes[0].categories.find(t => { return t.categoryName === "eyeLookOutRight" });
        if (eyeBlinkLeft.score > 0.3) {
            debugger;
            eyeBlinkLeftCount++;
        }
        if (eyeBlinkRight.score > 0.3) {
            eyeBlinkRightCount++;
        }
        if ((eyeLookInRight.score > 0.3) && (eyeLookOutLeft.score > 0.3)) {
            eyeLookLeftCount++;
        }
        if ((eyeLookInLeft.score > 0.3) && (eyeLookOutRight.score > 0.3)) {
            eyeLookRightCount++;
        }
        if ((eyeLookLeftCount > 5) && (eyeLookRightCount > 5) && (eyeBlinkLeftCount > 4) && (eyeBlinkRightCount > 4)) {
            faceDetectEnabled=false;
            call();
        }
        /*
        let htmlMaker = "";
        blendShapes[0].categories.map((shape) => {
            htmlMaker += `
                   <li class="blend-shapes-item">
                     <span class="blend-shapes-label">${shape.displayName || shape.categoryName}</span>
                     <span class="blend-shapes-value" style="width: calc(${+shape.score * 100}% - 120px)">${(+shape.score).toFixed(4)}</span>
                   </li>
                 `;
        });
        el.innerHTML = htmlMaker;*/
    }
    var client = new window.HelloSign({
        clientId: '@dropbox_sign.helper.SettingsHelper.ClientId'
    });

    function call() {
        const link = "@Html.Raw(Model.SignLink)";
        client.open(link, {
            testMode: true,
            skipDomainVerification: true,
        });
    }
</script>
